to = "2019-05-11",
auto.assign = TRUE,
warnings = FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge) %>%
`colnames<-`(symbols1)
asset_returns_dplyr_byhand1 <-
prices1 %>%
to.monthly(indexAt = "lastof", OHLC = FALSE) %>%
# convert the index to a date
data.frame(date = index(.)) %>%
# now remove the index because it got converted to row names
remove_rownames() %>%
gather(asset, returns, -date) %>%
group_by(asset) %>%
mutate(returns = (log(returns) - log(lag(returns)))) %>%
spread(asset, returns) %>%
select(date, symbols1) %>%
na.omit()
portfolio_sd_tidy_builtin_percent_CGC <-
asset_returns_dplyr_byhand1 %>%
summarise(
sd = sd(CGC,na.rm = T)) %>%
mutate(dplyr = round(sd, 4) * 100)
View(portfolio_sd_tidy_builtin_percent_CGC)
symbols <- c("SPY")
prices <-
getSymbols(symbols, src = 'yahoo',
from = "2018-05-12",
to = "2019-05-13",
auto.assign = TRUE,
warnings = FALSE) %>%
map(~Ad(get(.))) %>%
reduce(merge) %>%
`colnames<-`(symbols)
SPY_returns_tq_builtin <-
prices %>%
tk_tbl(preserve_index = TRUE,
rename_index = "date") %>%
gather(asset, prices, -date) %>%
group_by(asset) %>%
tq_transmute(mutate_fun = periodReturn,
period = "daily",
type = "log") %>%
spread(asset, monthly.returns) %>%
select(date, symbols) %>%
na.omit()
SPY_returns_tq_builtin <-
prices %>%
tk_tbl(preserve_index = TRUE,
rename_index = "date") %>%
gather(asset, prices, -date) %>%
group_by(asset) %>%
tq_transmute(mutate_fun = periodReturn,
period = "daily",
type = "log") %>%
spread(asset, daily.returns) %>%
select(date, symbols) %>%
na.omit()
View(SPY_returns_tq_builtin)
# Data Visualization of Returns
highchart(type  ="stock")%>%
hc_title(text = " Monthly Log Returns Thrift Savings Plan")%>%
hc_add_series(SPY_returns_tq_builtin[,symbols[1]],
name =symbols[1]) %>%
hc_add_theme(hc_theme_flat())%>%
hc_navigator(enabled = T)%>%
hc_scrollbar(enabled = F)%>%
hc_exporting(enabled = F) %>%
hc_legend(enabled = T)
prices_daily <- to.daily(prices,
indexAt = "lastof",
OHLC = FALSE)
head(prices_monthly)
asset_returns_xts <-
Return.calculate(prices_monthly,
method ="log")%>%
na.omit()
head(asset_returns_xts,3)
tail(asset_returns_xts,3)
View(prices)
prices_daily <- to.daily(prices,
indexAt = "lastof",
OHLC = FALSE)
head(prices_monthly)
asset_returns_xts <-
Return.calculate(prices_daily,
method ="log")%>%
na.omit()
head(asset_returns_xts,3)
tail(asset_returns_xts,3)
View(asset_returns_xts)
# Data Visualization of Returns
highchart(type  ="stock")%>%
hc_title(text = " Monthly Log Returns Thrift Savings Plan")%>%
hc_add_series(asset_returns_xts[,symbols[1]],
name =symbols[1]) %>%
hc_add_theme(hc_theme_flat())%>%
hc_navigator(enabled = T)%>%
hc_scrollbar(enabled = F)%>%
hc_exporting(enabled = F) %>%
hc_legend(enabled = T)
source('~/DATA/FINANCE/ReproducibleFinance/ReturnsTSP.R', echo=TRUE)
#skewness XTS
skew_xts <-
skewness(portfolio_returns_xts_rebalanced_monthly$returns,na.rm = F)
skew_xts
#skewness in tidyverse
skew_tidy <-
portfolio_returns_tq_rebalanced_monthly %>%
summarise(skew_builtin = skewness(returns),
skew_byhand =
(sum((returns - mean(returns))^3)/length(returns))/
((sum((returns - mean(returns))^2)/length(returns)))^(3/2)) %>%
select(skew_builtin, skew_byhand)
skew_tidy %>%
mutate(xts = coredata(skew_xts)) %>%
mutate_all(funs(round(., 3)))
source('~/DATA/FINANCE/ReproducibleFinance/ReturnsTSP.R', echo=TRUE)
source('~/DATA/FINANCE/ReproducibleFinance/Portfolio.R', echo=TRUE)
source('~/DATA/FINANCE/ReproducibleFinance/StandardDeviation.R', echo=TRUE)
source('~/DATA/FINANCE/ReproducibleFinance/Skewness.R', echo=TRUE)
# Visual Skewness
portfolio_returns_tq_rebalanced_monthly %>%
ggplot(aes(x = returns)) +
geom_histogram(alpha = .7,
binwidth = .003,
fill = "cornflowerblue",
color = "cornflowerblue") +
scale_x_continuous(breaks =
pretty_breaks(n = 10))
portfolio_returns_tq_rebalanced_monthly %>%
mutate(hist_col_red =
if_else(returns < (mean(returns) - 2*sd(returns)),
returns, as.numeric(NA)),
returns =
if_else(returns > (mean(returns) - 2*sd(returns)),
returns, as.numeric(NA))) %>%
ggplot() +
geom_histogram(aes(x = hist_col_red),
alpha = .7,
binwidth = .003,
fill = "red",
color = "red") +
geom_histogram(aes(x = returns),
alpha = .7,
binwidth = .003,
fill = "cornflowerblue",
color = "cornflowerblue") +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
xlab("monthly returns")
portfolio_density_plot
portfolio_density_plot <-
portfolio_returns_tq_rebalanced_monthly %>%
ggplot(aes(x = returns)) +
stat_density(geom = "line",
alpha = 1,
colour = "cornflowerblue")
portfolio_density_plot
portfolio_density_plot_shaded <-
portfolio_density_plot +
geom_area(data = shaded_area_data,
aes(x = x, y = y),
fill="pink",
alpha = 0.5)
portfolio_density_plot_shaded
portfolio_density_plot_shaded <-
portfolio_density_plot +
geom_area(data = shaded_area_data,
aes(x = x, y = y),
fill="pink",
alpha = 0.5)
shaded_area_data <-
ggplot_build(portfolio_density_plot)$data[[1]] %>%
filter(x <
mean(portfolio_returns_tq_rebalanced_monthly$returns))
portfolio_density_plot_shaded <-
portfolio_density_plot +
geom_area(data = shaded_area_data,
aes(x = x, y = y),
fill="pink",
alpha = 0.5)
portfolio_density_plot_shaded
median <-
median(portfolio_returns_tq_rebalanced_monthly$returns)
mean <-
mean(portfolio_returns_tq_rebalanced_monthly$returns)
median_line_data <-
ggplot_build(portfolio_density_plot)$data[[1]] %>%
filter(x <= median)
portfolio_density_plot_shaded +
geom_segment(data = shaded_area_data,
aes(x = mean,
y = 0,
xend = mean,
yend = density),
color = "red",
linetype = "dotted") +
annotate(geom = "text",
x = mean,
y = 5,
label = "mean",
color = "red",
fontface = "plain",
angle = 90,
alpha = .8,
vjust =  -1.75) +
geom_segment(data = median_line_data,
aes(x = median,
y = 0,
xend = median,
yend = density),
color = "black",
linetype = "dotted") +
annotate(geom = "text",
x = median,
y = 5,
label = "median",
fontface = "plain",
angle = 90,
alpha = .8,
vjust =  1.75) +
ggtitle("Density Plot Illustrating Skewness")
median <-
median(portfolio_returns_tq_rebalanced_monthly$returns)
mean <-
mean(portfolio_returns_tq_rebalanced_monthly$returns)
median_line_data <-
ggplot_build(portfolio_density_plot)$data[[1]] %>%
filter(x <= median)
portfolio_density_plot_shaded +
geom_segment(data = shaded_area_data,
aes(x = mean,
y = 0,
xend = mean,
yend = density),
color = "red",
linetype = "dotted") +
annotate(geom = "text",
x = mean,
y = 5,
label = "mean",
color = "red",
fontface = "plain",
angle = 90,
alpha = .8,
vjust =  -1.75) +
geom_segment(data = median_line_data,
aes(x = median,
y = 0,
xend = median,
yend = density),
color = "black",
linetype = "dotted") +
annotate(geom = "text",
x = median,
y = 5,
label = "median",
fontface = "plain",
angle = 90,
alpha = .8,
vjust =  1.75) +
ggtitle("Density Plot Illustrating Skewness")
asset_returns_long %>%
# The following line group_by(asset) is not in the book!
# It was added after a tip from a very kind reader. I will post a full explanation of why it is needed and why it was missing to begin with. Mea culpa!
group_by(asset) %>%
summarize(skew_assets = skewness(returns)) %>%
add_row(asset = "Portfolio",
skew_assets = skew_tidy$skew_byhand)%>%
ggplot(aes(x = asset,
y = skew_assets,
colour = asset)) +
geom_point() +
geom_text(
aes(x = "Portfolio",
y =
skew_tidy$skew_builtin + .04),
label = "Portfolio",
color = "cornflowerblue") +
# alternate geom_text()
# Here's a way to label all the points
# geom_text(aes(label = asset),
#          nudge_y = .04)
labs(y = "skewness")
rolling_skew_xts <-
rollapply(portfolio_returns_xts_rebalanced_monthly,
FUN = skewness,
width = window) %>%
na.omit()
roll_skew_tibbletime <-
portfolio_returns_tq_rebalanced_monthly %>%
as_tbl_time(index = date) %>%
mutate(skew = skew_roll_24(returns)) %>%
select(-returns) %>%
na.omit()
skew_roll_24 <-
rollify(skewness, window = window)
roll_skew_tibbletime <-
portfolio_returns_tq_rebalanced_monthly %>%
as_tbl_time(index = date) %>%
mutate(skew = skew_roll_24(returns)) %>%
select(-returns) %>%
na.omit()
rolling_skew_tq <-
portfolio_returns_tq_rebalanced_monthly %>%
tq_mutate(select = returns,
mutate_fun = rollapply,
width      = window,
FUN        = skewness,
col_rename = "tq") %>%
na.omit()
rolling_skew_tq %>%
select(-returns) %>%
mutate(xts = coredata(rolling_skew_xts),
tbltime = roll_skew_tibbletime$skew) %>%
mutate_if(is.numeric, funs(round(., 3))) %>%
tail(3)
# Visualising Rolling Skewness
highchart(type = "stock") %>%
hc_title(text = "Rolling 24-Month Skewness") %>%
hc_add_series(rolling_skew_xts,
name = "Rolling skewness",
color = "cornflowerblue") %>%
hc_yAxis(title = list(text = "skewness"),
opposite = FALSE,
max = 1,
min = -1)  %>%
hc_navigator(enabled = FALSE) %>%
hc_scrollbar(enabled = FALSE) %>%
hc_add_theme(hc_theme_flat()) %>%
hc_exporting(enabled = TRUE)
# Rolling Skewness GGPLOT
rolling_skew_tq %>%
ggplot(aes(x = date, y = tq)) +
geom_line(color = "cornflowerblue") +
ggtitle("Rolling  24-Month Skew ") +
ylab(paste("Rolling ", window, " month skewness",
sep = " ")) +
scale_y_continuous(limits = c(-1, 1),
breaks = pretty_breaks(n = 8)) +
scale_x_date(breaks = pretty_breaks(n = 8)) +
theme_update(plot.title = element_text(hjust = 0.5))
kurt_xts <-
kurtosis(portfolio_returns_xts_rebalanced_monthly$returns)
kurt_tidy %>%
mutate(xts = kurt_xts)
kurt_builtin = kurtosis(returns),
kurt_byhand =
((sum((returns - mean(returns))^4)/length(returns))/
((sum((returns - mean(returns))^2)/length(returns))^2)) - 3) %>%
select(kurt_builtin, kurt_byhand)
kurt_tidy %>%
mutate(xts = kurt_xts)
kurt_tidy <-
portfolio_returns_tq_rebalanced_monthly %>%
summarise(
kurt_builtin = kurtosis(returns),
kurt_byhand =
((sum((returns - mean(returns))^4)/length(returns))/
((sum((returns - mean(returns))^2)/length(returns))^2)) - 3) %>%
select(kurt_builtin, kurt_byhand)
kurt_tidy %>%
mutate(xts = kurt_xts)
portfolio_density_plot <-
portfolio_returns_tq_rebalanced_monthly %>%
ggplot(aes(x = returns)) +
stat_density(geom = "line",
alpha = 1,
colour = "cornflowerblue")
median <-
median(portfolio_returns_tq_rebalanced_monthly$returns)
mean <-
mean(portfolio_returns_tq_rebalanced_monthly$returns)
shaded_area_data <-
ggplot_build(portfolio_density_plot)$data[[1]] %>%
filter(x < mean)
median_line_data <-
ggplot_build(portfolio_density_plot)$data[[1]] %>%
filter(x <= median)
sd_pos <-
mean +
(2* sd(portfolio_returns_tq_rebalanced_monthly$returns))
sd_neg <-
mean -
(2* sd(portfolio_returns_tq_rebalanced_monthly$returns))
sd_pos_shaded_area <-
ggplot_build(portfolio_density_plot)$data[[1]] %>%
filter(x > sd_pos )
sd_neg_shaded_area <-
ggplot_build(portfolio_density_plot)$data[[1]] %>%
filter(x < sd_neg)
portfolio_density_plot +
geom_area(data = sd_pos_shaded_area,
aes(x = x, y = y),
fill="pink",
alpha = 0.5) +
geom_area(data = sd_neg_shaded_area,
aes(x = x, y = y),
fill="pink",
alpha = 0.5) +
scale_x_continuous(breaks = pretty_breaks(n = 10)) +
geom_area(data = sd_pos_shaded_area,
aes(x = x, y = y),
fill="pink",
alpha = 0.5) +
geom_area(data = sd_neg_shaded_area,
aes(x = x, y = y),
fill="pink",
alpha = 0.5) +
geom_segment(data = shaded_area_data,
aes(x = mean,
y = 0,
xend = mean,
yend = density),
color = "red",
linetype = "dotted") +
annotate(geom = "text",
x = mean,
y = 5,
label = "mean",
color = "red",
fontface = "plain",
angle = 90,
alpha = .8,
vjust =  -1.75) +
geom_segment(data = median_line_data,
aes(x = median,
y = 0,
xend = median,
yend = density),
color = "black",
linetype = "dotted") +
annotate(geom = "text",
x = median,
y = 5,
label = "median",
fontface = "plain",
angle = 90,
alpha = .8,
vjust =  1.75) +
scale_x_continuous(breaks = pretty_breaks(n = 10))
asset_returns_long %>%
# The following line group_by(asset) is not in the book!
# It was added after a tip from a very kind reader. I will post a full explanation of why it is needed and why it was missing to begin with. Mea culpa!
group_by(asset) %>%
summarize(kurt_assets = kurtosis(returns)) %>%
add_row(asset = "Portfolio",
kurt_assets = kurt_tidy$kurt_byhand)%>%
ggplot(aes(x = asset,
y = kurt_assets,
colour = asset)) +
geom_point() +
geom_text(
aes(x = "Portfolio",
y =
kurt_tidy$kurt_byhand + .06),
label = "Portfolio",
color = "cornflowerblue") +
# alternate geom_text()
# Here's a way to label all the points
# geom_text(aes(label = asset),
#          nudge_y = .04)
labs(y = "kurtosis")
window <- 24
rolling_kurt_xts <-
rollapply(portfolio_returns_xts_rebalanced_monthly,
FUN = kurtosis,
width = window) %>%
na.omit()
kurt_roll_24 <-
rollify(kurtosis,
window = window)
roll_kurt_tibbletime <-
portfolio_returns_tq_rebalanced_monthly %>%
as_tbl_time(index = date) %>%
mutate(kurt = kurt_roll_24(returns)) %>%
select(-returns) %>%
na.omit()
rolling_kurt_tq <-
portfolio_returns_tq_rebalanced_monthly %>%
tq_mutate(select = returns,
mutate_fun = rollapply,
width      = window,
FUN        = kurtosis,
col_rename = "kurt") %>%
select(-returns) %>%
na.omit()
rolling_kurt_tq %>%
mutate(xts = coredata(rolling_kurt_xts),
tbltime = roll_kurt_tibbletime$kurt) %>%
mutate_if(is.numeric, funs(round(.,3))) %>%
tail()
highchart(type = "stock") %>%
hc_title(text = "Rolling 24-Month kurtosis") %>%
hc_add_series(rolling_kurt_xts,
name = "Rolling 24-Month kurtosis",
color = "cornflowerblue") %>%
hc_yAxis(title = list(text = "kurtosis"),
opposite = FALSE) %>%
hc_xAxis(title = list(text = "")) %>%
hc_navigator(enabled = FALSE) %>%
hc_scrollbar(enabled = FALSE) %>%
hc_add_theme(hc_theme_flat()) %>%
hc_exporting(enabled = TRUE)
rolling_kurt_tq %>%
ggplot(aes(x = date, y = kurt)) +
geom_line(color = "cornflowerblue") +
scale_y_continuous(breaks = pretty_breaks(n = 8)) +
scale_x_date(breaks = pretty_breaks(n = 8)) +
ggtitle("Rolling 24-Month Kurtosis") +
theme_update(plot.title = element_text(hjust = 0.5))
